/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/me": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: components["responses"]["ValidUser"]
        400: components["responses"]["BadRequest"]
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/login": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: components["requestBodies"]["Login"]
      responses: {
        201: components["responses"]["LoginSuccess"]
        400: components["responses"]["BadRequest"]
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/books": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: {
          title?: string
          "date-from"?: string
          "date-to"?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: components["responses"]["BookSuccess"]
        400: components["responses"]["BadRequest"]
      }
    }
    put?: never
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: components["requestBodies"]["Book"]
      responses: {
        200: components["schemas"]["Book"]
        400: components["responses"]["BadRequest"]
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/books/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: components["responses"]["BookSuccess"]
        400: components["responses"]["BadRequest"]
      }
    }
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: components["requestBodies"]["Book"]
      responses: {
        200: components["schemas"]["Book"]
        400: components["responses"]["BadRequest"]
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export type components = {
  schemas: {
    Id: {
      id: string
    }
    Email: {
      email: string
    }
    Password: {
      password: string
    }
    Authenticated: {
      accessToken: string
    }
    Book: {
      title: string
      /** Format: date */
      borrowDate: string
      /** Format: date */
      returnDate: string
    }
    /** @enum {string} */
    UserRole: "ADMIN" | "COMMON"
    User: {
      role: components["schemas"]["UserRole"]
    }
    BadRequestError: {
      /** Format: int32 */
      code: number
      reason: string
    }
  }
  responses: {
    ValidUser: {
      headers: {
        [name: string]: unknown
      }
      content: {
        "application/json": components["schemas"]["User"]
      }
    }
    LoginSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        "application/json": components["schemas"]["Authenticated"]
      }
    }
    BookSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        "application/json": (components["schemas"]["Id"] & components["schemas"]["Book"])[]
      }
    }
    BadRequest: {
      headers: {
        [name: string]: unknown
      }
      content: {
        "application/json": components["schemas"]["BadRequestError"][]
      }
    }
  }
  parameters: {
    BookListParams: string
  }
  requestBodies: {
    Login: {
      content: {
        "application/json": WithRequired<components["schemas"]["Email"], "email"> &
          WithRequired<components["schemas"]["Password"], "password">
      }
    }
    Book: {
      content: {
        "application/json": components["schemas"]["Book"]
      }
    }
  }
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
type WithRequired<T, K extends keyof T> = T & {
  [P in K]-?: T[P]
}
export type operations = Record<string, never>
